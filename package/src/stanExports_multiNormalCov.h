// Generated by rstantools.  Do not edit by hand.

/*
    package2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    package2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with package2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_multiNormalCov_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multiNormalCov");
    reader.add_event(61, 59, "end", "model_multiNormalCov");
    return reader;
}
#include <stan_meta_header.hpp>
class model_multiNormalCov
  : public stan::model::model_base_crtp<model_multiNormalCov> {
private:
        int K;
        int J;
        int N;
        std::vector<vector_d> X;
        std::vector<vector_d> Y;
        int c;
        matrix_d LA;
        vector_d y_sd;
        vector_d y_var;
        vector_d y_mean;
        std::vector<vector_d> Y_std;
public:
    model_multiNormalCov(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_multiNormalCov(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_multiNormalCov_namespace::model_multiNormalCov";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("X", "J", J);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N,J));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(J));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = J;
            size_t X_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("Y", "K", K);
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N,K));
            Y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = K;
            size_t Y_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "c", "int", context__.to_vec());
            c = int(0);
            vals_i__ = context__.vals_i("c");
            pos__ = 0;
            c = vals_i__[pos__++];
            check_greater_or_equal(function__, "c", c, 1);
            // initialize transformed data variables
            current_statement_begin__ = 11;
            validate_non_negative_index("LA", "N", N);
            validate_non_negative_index("LA", "N", N);
            LA = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(LA, DUMMY_VAR__);
            current_statement_begin__ = 12;
            validate_non_negative_index("y_sd", "K", K);
            y_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_sd, DUMMY_VAR__);
            current_statement_begin__ = 13;
            validate_non_negative_index("y_var", "K", K);
            y_var = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_var, DUMMY_VAR__);
            current_statement_begin__ = 14;
            validate_non_negative_index("y_mean", "K", K);
            y_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_mean, DUMMY_VAR__);
            current_statement_begin__ = 15;
            validate_non_negative_index("Y_std", "K", K);
            validate_non_negative_index("Y_std", "N", N);
            Y_std = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::fill(Y_std, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 17;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 18;
                stan::model::assign(y_sd, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (sd(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")) / 2), 
                            "assigning variable y_sd");
                current_statement_begin__ = 19;
                stan::model::assign(y_mean, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")), 
                            "assigning variable y_mean");
                current_statement_begin__ = 20;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 21;
                    stan::model::assign(Y_std, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                ((get_base1(get_base1(Y, n, "Y", 1), k, "Y", 2) - get_base1(y_mean, k, "y_mean", 1)) / get_base1(y_sd, k, "y_sd", 1)), 
                                "assigning variable Y_std");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "J", J);
            num_params_r__ += (K * J);
            current_statement_begin__ = 28;
            validate_non_negative_index("L_Omega_R", "K", K);
            validate_non_negative_index("L_Omega_R", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 29;
            validate_non_negative_index("L_sigma_R", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_multiNormalCov() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        validate_non_negative_index("beta", "J", J);
        context__.validate_dims("parameter initialization", "beta", "matrix_d", context__.to_vec(K,J));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(K, J);
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                beta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("L_Omega_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega_R");
        pos__ = 0U;
        validate_non_negative_index("L_Omega_R", "K", K);
        validate_non_negative_index("L_Omega_R", "K", K);
        context__.validate_dims("parameter initialization", "L_Omega_R", "matrix_d", context__.to_vec(K,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R(K, K);
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                L_Omega_R(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("L_sigma_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_sigma_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_sigma_R");
        pos__ = 0U;
        validate_non_negative_index("L_sigma_R", "K", K);
        context__.validate_dims("parameter initialization", "L_sigma_R", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_R(K);
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            L_sigma_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, L_sigma_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_sigma_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(K, J, lp__);
            else
                beta = in__.matrix_constrain(K, J);
            current_statement_begin__ = 28;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R;
            (void) L_Omega_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega_R = in__.cholesky_factor_corr_constrain(K, lp__);
            else
                L_Omega_R = in__.cholesky_factor_corr_constrain(K);
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_sigma_R;
            (void) L_sigma_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma_R = in__.vector_lb_constrain(0, K, lp__);
            else
                L_sigma_R = in__.vector_lb_constrain(0, K);
            // model body
            {
            current_statement_begin__ = 34;
            validate_non_negative_index("mu", "K", K);
            validate_non_negative_index("mu", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > mu(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("L_Sigma_R", "K", K);
            validate_non_negative_index("L_Sigma_R", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Sigma_R(K, K);
            stan::math::initialize(L_Sigma_R, DUMMY_VAR__);
            stan::math::fill(L_Sigma_R, DUMMY_VAR__);
            current_statement_begin__ = 37;
            stan::math::assign(L_Sigma_R, diag_pre_multiply(L_sigma_R, L_Omega_R));
            current_statement_begin__ = 39;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 40;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            multiply(beta, get_base1(X, n, "X", 1)), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 42;
            lp_accum__.add(multi_normal_cholesky_log<propto__>(Y_std, mu, L_Sigma_R));
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(to_vector(beta), 0, 1));
            current_statement_begin__ = 46;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega_R, c));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(L_sigma_R, 0, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("L_Omega_R");
        names__.push_back("L_sigma_R");
        names__.push_back("sigma_R");
        names__.push_back("P");
        names__.push_back("corrP");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_multiNormalCov_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta = in__.matrix_constrain(K, J);
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                vars__.push_back(beta(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R = in__.cholesky_factor_corr_constrain(K);
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega_R(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_R = in__.vector_lb_constrain(0, K);
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            vars__.push_back(L_sigma_R(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 50;
            validate_non_negative_index("sigma_R", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_R(K);
            stan::math::initialize(sigma_R, DUMMY_VAR__);
            stan::math::fill(sigma_R, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> P(K, K);
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("corrP", "K", K);
            validate_non_negative_index("corrP", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corrP(K, K);
            stan::math::initialize(corrP, DUMMY_VAR__);
            stan::math::fill(corrP, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 54;
            stan::math::assign(sigma_R, elt_multiply(y_sd, L_sigma_R));
            current_statement_begin__ = 56;
            stan::math::assign(P, multiply_lower_tri_self_transpose(diag_pre_multiply(sigma_R, L_Omega_R)));
            current_statement_begin__ = 58;
            stan::math::assign(corrP, multiply_lower_tri_self_transpose(L_Omega_R));
            // validate, write generated quantities
            current_statement_begin__ = 50;
            size_t sigma_R_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_R(j_1__));
            }
            current_statement_begin__ = 51;
            stan::math::check_cov_matrix(function__, "P", P);
            size_t P_j_2_max__ = K;
            size_t P_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    vars__.push_back(P(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 52;
            stan::math::check_corr_matrix(function__, "corrP", corrP);
            size_t corrP_j_2_max__ = K;
            size_t corrP_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < corrP_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corrP_j_1_max__; ++j_1__) {
                    vars__.push_back(corrP(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_multiNormalCov";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega_R" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P_j_2_max__ = K;
        size_t P_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "P" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corrP_j_2_max__ = K;
        size_t corrP_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < corrP_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corrP_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corrP" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_R_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P_j_1_max__ = (K + ((K * (K - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corrP_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corrP_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corrP" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_multiNormalCov_namespace::model_multiNormalCov stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
