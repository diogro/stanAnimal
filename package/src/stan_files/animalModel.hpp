/*
    stanAnimal is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanAnimal is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanAnimal.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_animalModel_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_animalModel");
    reader.add_event(102, 102, "end", "model_animalModel");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
as_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& X,
              const int& N,
              const int& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("Y", "N", N);
        validate_non_negative_index("Y", "K", K);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Y(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        (void) Y;  // dummy to suppress unused var warning

        stan::math::initialize(Y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Y,DUMMY_VAR__);


        current_statement_begin__ = 4;
        for (int i = 1; i <= N; ++i) {

            current_statement_begin__ = 5;
            stan::math::assign(get_base1_lhs(Y,i,"Y",1), to_row_vector(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max((((i - 1) * K) + 1), (i * K)), stan::model::nil_index_list()), "X")));
        }
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct as_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& X,
              const int& N,
              const int& K, std::ostream* pstream__) const {
        return as_matrix(X, N, K, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
chol_kronecker_product(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& LA,
                           const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& LG,
                           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        validate_non_negative_index("new_a", "num_elements(a)", num_elements(a));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  new_a(static_cast<Eigen::VectorXd::Index>(num_elements(a)));
        (void) new_a;  // dummy to suppress unused var warning

        stan::math::initialize(new_a, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(new_a,DUMMY_VAR__);


        current_statement_begin__ = 11;
        stan::math::assign(new_a, rep_vector(0,num_elements(a)));
        current_statement_begin__ = 12;
        for (int iA = 1; iA <= cols(LA); ++iA) {

            current_statement_begin__ = 13;
            for (int jA = 1; jA <= iA; ++jA) {

                current_statement_begin__ = 14;
                if (as_bool(logical_gt(get_base1(LA,iA,jA,"LA",1),1e-10))) {

                    current_statement_begin__ = 15;
                    for (int iG = 1; iG <= cols(LG); ++iG) {

                        current_statement_begin__ = 16;
                        for (int jG = 1; jG <= iG; ++jG) {

                            current_statement_begin__ = 17;
                            stan::math::assign(get_base1_lhs(new_a,((cols(LG) * (iA - 1)) + iG),"new_a",1), (get_base1(new_a,((cols(LG) * (iA - 1)) + iG),"new_a",1) + ((get_base1(LA,iA,jA,"LA",1) * get_base1(LG,iG,jG,"LG",1)) * get_base1(a,((cols(LG) * (jA - 1)) + jG),"a",1))));
                        }
                    }
                }
            }
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(new_a);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct chol_kronecker_product_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& LA,
                           const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& LG,
                           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& a, std::ostream* pstream__) const {
        return chol_kronecker_product(LA, LG, a, pstream__);
    }
};

#include <meta_header.hpp>
 class model_animalModel : public prob_grad {
private:
    int K;
    int J;
    int N;
    vector<vector_d> X;
    vector<vector_d> Y;
    matrix_d A;
    matrix_d LA;
    vector_d y_sd;
    vector_d y_var;
    vector_d y_mean;
    vector<vector_d> Y_std;
public:
    model_animalModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_animalModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_animalModel_namespace::model_animalModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 30;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "J", J);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N,J));
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "J", J);
            X = std::vector<vector_d>(N,vector_d(static_cast<Eigen::VectorXd::Index>(J)));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_i_vec_lim__ = J;
            for (size_t i_vec__ = 0; i_vec__ < X_i_vec_lim__; ++i_vec__) {
                size_t X_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < X_limit_0__; ++i_0__) {
                    X[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("Y", "N", N);
            validate_non_negative_index("Y", "K", K);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N,K));
            validate_non_negative_index("Y", "N", N);
            validate_non_negative_index("Y", "K", K);
            Y = std::vector<vector_d>(N,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < Y_i_vec_lim__; ++i_vec__) {
                size_t Y_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
                    Y[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("A", "N", N);
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "matrix_d", context__.to_vec(N,N));
            validate_non_negative_index("A", "N", N);
            validate_non_negative_index("A", "N", N);
            A = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_m_mat_lim__ = N;
            size_t A_n_mat_lim__ = N;
            for (size_t n_mat__ = 0; n_mat__ < A_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < A_m_mat_lim__; ++m_mat__) {
                    A(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 28;
            check_greater_or_equal(function__,"J",J,1);
            current_statement_begin__ = 29;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;
            current_statement_begin__ = 32;
            // initialize data variables
            current_statement_begin__ = 35;
            validate_non_negative_index("LA", "N", N);
            validate_non_negative_index("LA", "N", N);
            LA = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(N));
            stan::math::fill(LA,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("y_sd", "K", K);
            y_sd = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            stan::math::fill(y_sd,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("y_var", "K", K);
            y_var = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            stan::math::fill(y_var,DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("y_mean", "K", K);
            y_mean = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            stan::math::fill(y_mean,DUMMY_VAR__);
            current_statement_begin__ = 39;
            validate_non_negative_index("Y_std", "N", N);
            validate_non_negative_index("Y_std", "K", K);
            Y_std = std::vector<vector_d>(N,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
            stan::math::fill(Y_std,DUMMY_VAR__);

            current_statement_begin__ = 40;
            stan::math::assign(LA, cholesky_decompose(A));
            current_statement_begin__ = 42;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 43;
                stan::math::assign(get_base1_lhs(y_sd,k,"y_sd",1), (sd(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")) / 2));
                current_statement_begin__ = 44;
                stan::math::assign(get_base1_lhs(y_mean,k,"y_mean",1), mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")));
                current_statement_begin__ = 45;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 46;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(Y_std,n,"Y_std",1),k,"Y_std",2), ((get_base1(get_base1(Y,n,"Y",1),k,"Y",2) - get_base1(y_mean,k,"y_mean",1)) / get_base1(y_sd,k,"y_sd",1)));
                }
            }

            // validate transformed data
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;
            current_statement_begin__ = 39;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 50;
        validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "J", J);
            num_params_r__ += K * J;
            current_statement_begin__ = 51;
            validate_non_negative_index("a_tilde", "(N * K)", (N * K));
            num_params_r__ += (N * K);
            current_statement_begin__ = 54;
            validate_non_negative_index("L_Omega_G", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 55;
            validate_non_negative_index("L_sigma_G", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 58;
            validate_non_negative_index("L_Omega_R", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 59;
            validate_non_negative_index("L_sigma_R", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_animalModel() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        validate_non_negative_index("beta", "J", J);
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(K,J));
        matrix_d beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(J));
        for (int j2__ = 0U; j2__ < J; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("a_tilde")))
            throw std::runtime_error("variable a_tilde missing");
        vals_r__ = context__.vals_r("a_tilde");
        pos__ = 0U;
        validate_non_negative_index("a_tilde", "(N * K)", (N * K));
        context__.validate_dims("initialization", "a_tilde", "vector_d", context__.to_vec((N * K)));
        vector_d a_tilde(static_cast<Eigen::VectorXd::Index>((N * K)));
        for (int j1__ = 0U; j1__ < (N * K); ++j1__)
            a_tilde(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a_tilde);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_tilde: ") + e.what());
        }

        if (!(context__.contains_r("L_Omega_G")))
            throw std::runtime_error("variable L_Omega_G missing");
        vals_r__ = context__.vals_r("L_Omega_G");
        pos__ = 0U;
        validate_non_negative_index("L_Omega_G", "K", K);
        validate_non_negative_index("L_Omega_G", "K", K);
        context__.validate_dims("initialization", "L_Omega_G", "matrix_d", context__.to_vec(K,K));
        matrix_d L_Omega_G(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                L_Omega_G(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L_Omega_G);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_Omega_G: ") + e.what());
        }

        if (!(context__.contains_r("L_sigma_G")))
            throw std::runtime_error("variable L_sigma_G missing");
        vals_r__ = context__.vals_r("L_sigma_G");
        pos__ = 0U;
        validate_non_negative_index("L_sigma_G", "K", K);
        context__.validate_dims("initialization", "L_sigma_G", "vector_d", context__.to_vec(K));
        vector_d L_sigma_G(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            L_sigma_G(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,L_sigma_G);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_sigma_G: ") + e.what());
        }

        if (!(context__.contains_r("L_Omega_R")))
            throw std::runtime_error("variable L_Omega_R missing");
        vals_r__ = context__.vals_r("L_Omega_R");
        pos__ = 0U;
        validate_non_negative_index("L_Omega_R", "K", K);
        validate_non_negative_index("L_Omega_R", "K", K);
        context__.validate_dims("initialization", "L_Omega_R", "matrix_d", context__.to_vec(K,K));
        matrix_d L_Omega_R(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                L_Omega_R(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L_Omega_R);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_Omega_R: ") + e.what());
        }

        if (!(context__.contains_r("L_sigma_R")))
            throw std::runtime_error("variable L_sigma_R missing");
        vals_r__ = context__.vals_r("L_sigma_R");
        pos__ = 0U;
        validate_non_negative_index("L_sigma_R", "K", K);
        context__.validate_dims("initialization", "L_sigma_R", "vector_d", context__.to_vec(K));
        vector_d L_sigma_R(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            L_sigma_R(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,L_sigma_R);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_sigma_R: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(K,J,lp__);
            else
                beta = in__.matrix_constrain(K,J);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  a_tilde;
            (void) a_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                a_tilde = in__.vector_constrain((N * K),lp__);
            else
                a_tilde = in__.vector_constrain((N * K));

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L_Omega_G;
            (void) L_Omega_G;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega_G = in__.cholesky_corr_constrain(K,lp__);
            else
                L_Omega_G = in__.cholesky_corr_constrain(K);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_sigma_G;
            (void) L_sigma_G;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma_G = in__.vector_lb_constrain(0,K,lp__);
            else
                L_sigma_G = in__.vector_lb_constrain(0,K);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L_Omega_R;
            (void) L_Omega_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega_R = in__.cholesky_corr_constrain(K,lp__);
            else
                L_Omega_R = in__.cholesky_corr_constrain(K);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_sigma_R;
            (void) L_sigma_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma_R = in__.vector_lb_constrain(0,K,lp__);
            else
                L_sigma_R = in__.vector_lb_constrain(0,K);


            // transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("a", "N", N);
            validate_non_negative_index("a", "K", K);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  a(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a,DUMMY_VAR__);


            current_statement_begin__ = 64;
            stan::math::assign(a, as_matrix(chol_kronecker_product(LA,diag_pre_multiply(L_sigma_G,L_Omega_G),a_tilde, pstream__),N,K, pstream__));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < N; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(a(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: a" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 63;

            // model body
            {
            current_statement_begin__ = 67;
            validate_non_negative_index("mu", "K", K);
            validate_non_negative_index("mu", "N", N);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu(N, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(K))));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("L_Sigma_R", "K", K);
            validate_non_negative_index("L_Sigma_R", "K", K);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L_Sigma_R(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) L_Sigma_R;  // dummy to suppress unused var warning

            stan::math::initialize(L_Sigma_R, DUMMY_VAR__);
            stan::math::fill(L_Sigma_R,DUMMY_VAR__);


            current_statement_begin__ = 70;
            stan::math::assign(L_Sigma_R, diag_pre_multiply(L_sigma_R,L_Omega_R));
            current_statement_begin__ = 72;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 73;
                stan::math::assign(get_base1_lhs(mu,n,"mu",1), add(multiply(beta,get_base1(X,n,"X",1)),to_vector(get_base1(a,n,"a",1))));
            }
            current_statement_begin__ = 75;
            lp_accum__.add(multi_normal_cholesky_log<propto__>(Y_std, mu, L_Sigma_R));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(to_vector(beta), 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(a_tilde, 0, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega_G, 4));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(L_sigma_G, 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega_R, 4));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log<propto__>(L_sigma_R, 0, 1));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("a_tilde");
        names__.push_back("L_Omega_G");
        names__.push_back("L_sigma_G");
        names__.push_back("L_Omega_R");
        names__.push_back("L_sigma_R");
        names__.push_back("a");
        names__.push_back("sigma_G");
        names__.push_back("sigma_R");
        names__.push_back("P");
        names__.push_back("G");
        names__.push_back("E");
        names__.push_back("corrG");
        names__.push_back("corrE");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_animalModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d beta = in__.matrix_constrain(K,J);
        vector_d a_tilde = in__.vector_constrain((N * K));
        matrix_d L_Omega_G = in__.cholesky_corr_constrain(K);
        vector_d L_sigma_G = in__.vector_lb_constrain(0,K);
        matrix_d L_Omega_R = in__.cholesky_corr_constrain(K);
        vector_d L_sigma_R = in__.vector_lb_constrain(0,K);
            for (int k_1__ = 0; k_1__ < J; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < (N * K); ++k_0__) {
            vars__.push_back(a_tilde[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(L_Omega_G(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(L_sigma_G[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(L_Omega_R(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(L_sigma_R[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 63;
            validate_non_negative_index("a", "N", N);
            validate_non_negative_index("a", "K", K);
            matrix_d a(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a,DUMMY_VAR__);


            current_statement_begin__ = 64;
            stan::math::assign(a, as_matrix(chol_kronecker_product(LA,diag_pre_multiply(L_sigma_G,L_Omega_G),a_tilde, pstream__),N,K, pstream__));

            // validate transformed parameters
            current_statement_begin__ = 63;

            // write transformed parameters
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(a(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 85;
            validate_non_negative_index("sigma_G", "K", K);
            vector_d sigma_G(static_cast<Eigen::VectorXd::Index>(K));
            (void) sigma_G;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_G, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma_G,DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("sigma_R", "K", K);
            vector_d sigma_R(static_cast<Eigen::VectorXd::Index>(K));
            (void) sigma_R;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_R, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma_R,DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("P", "K", K);
            matrix_d P(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) P;  // dummy to suppress unused var warning

            stan::math::initialize(P, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P,DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("G", "K", K);
            matrix_d G(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) G;  // dummy to suppress unused var warning

            stan::math::initialize(G, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(G,DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("E", "K", K);
            matrix_d E(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) E;  // dummy to suppress unused var warning

            stan::math::initialize(E, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(E,DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("corrG", "K", K);
            matrix_d corrG(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) corrG;  // dummy to suppress unused var warning

            stan::math::initialize(corrG, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(corrG,DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("corrE", "K", K);
            matrix_d corrE(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
            (void) corrE;  // dummy to suppress unused var warning

            stan::math::initialize(corrE, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(corrE,DUMMY_VAR__);


            current_statement_begin__ = 93;
            stan::math::assign(sigma_G, elt_multiply(y_sd,L_sigma_G));
            current_statement_begin__ = 94;
            stan::math::assign(sigma_R, elt_multiply(y_sd,L_sigma_R));
            current_statement_begin__ = 96;
            stan::math::assign(G, multiply_lower_tri_self_transpose(diag_pre_multiply(sigma_G,L_Omega_G)));
            current_statement_begin__ = 97;
            stan::math::assign(E, multiply_lower_tri_self_transpose(diag_pre_multiply(sigma_R,L_Omega_R)));
            current_statement_begin__ = 98;
            stan::math::assign(P, add(G,E));
            current_statement_begin__ = 100;
            stan::math::assign(corrG, multiply_lower_tri_self_transpose(L_Omega_G));
            current_statement_begin__ = 101;
            stan::math::assign(corrE, multiply_lower_tri_self_transpose(L_Omega_R));

            // validate generated quantities
            current_statement_begin__ = 85;
            current_statement_begin__ = 86;
            current_statement_begin__ = 87;
            stan::math::check_cov_matrix(function__,"P",P);
            current_statement_begin__ = 88;
            stan::math::check_cov_matrix(function__,"G",G);
            current_statement_begin__ = 89;
            stan::math::check_cov_matrix(function__,"E",E);
            current_statement_begin__ = 90;
            stan::math::check_corr_matrix(function__,"corrG",corrG);
            current_statement_begin__ = 91;
            stan::math::check_corr_matrix(function__,"corrE",corrE);

            // write generated quantities
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma_G[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma_R[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(P(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(G(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(E(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(corrG(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(corrE(k_0__, k_1__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_animalModel";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (N * K); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_tilde" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega_G" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega_R" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "P" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "G" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corrG" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corrE" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (N * K); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_tilde" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((K * (K - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega_G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((K * (K - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega_R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (K + ((K * (K - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (K + ((K * (K - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "G" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (K + ((K * (K - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((K * (K - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corrG" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((K * (K - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corrE" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_animalModel_namespace::model_animalModel stan_model;


#endif
