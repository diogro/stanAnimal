// Generated by rstantools.  Do not edit by hand.

/*
    package2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    package2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with package2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_animalModel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_animalModel");
    reader.add_event(104, 102, "end", "model_animalModel");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
as_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& X,
              const int& N,
              const int& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("Y", "N", N);
        validate_non_negative_index("Y", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(N, K);
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        current_statement_begin__ = 4;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 5;
            stan::model::assign(Y, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        to_row_vector(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max((((i - 1) * K) + 1), (i * K)), stan::model::nil_index_list()), "X")), 
                        "assigning variable Y");
        }
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct as_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& X,
              const int& N,
              const int& K, std::ostream* pstream__) const {
        return as_matrix(X, N, K, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
chol_kronecker_product(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& LA,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& LG,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        validate_non_negative_index("new_a", "num_elements(a)", num_elements(a));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_a(num_elements(a));
        stan::math::initialize(new_a, DUMMY_VAR__);
        stan::math::fill(new_a, DUMMY_VAR__);
        current_statement_begin__ = 11;
        stan::math::assign(new_a, rep_vector(0, num_elements(a)));
        current_statement_begin__ = 12;
        for (int iA = 1; iA <= cols(LA); ++iA) {
            current_statement_begin__ = 13;
            for (int jA = 1; jA <= iA; ++jA) {
                current_statement_begin__ = 14;
                if (as_bool(logical_gt(get_base1(LA, iA, jA, "LA", 1), 1e-10))) {
                    current_statement_begin__ = 15;
                    for (int iG = 1; iG <= cols(LG); ++iG) {
                        current_statement_begin__ = 16;
                        for (int jG = 1; jG <= iG; ++jG) {
                            current_statement_begin__ = 17;
                            stan::model::assign(new_a, 
                                        stan::model::cons_list(stan::model::index_uni(((cols(LG) * (iA - 1)) + iG)), stan::model::nil_index_list()), 
                                        (get_base1(new_a, ((cols(LG) * (iA - 1)) + iG), "new_a", 1) + ((get_base1(LA, iA, jA, "LA", 1) * get_base1(LG, iG, jG, "LG", 1)) * get_base1(a, ((cols(LG) * (jA - 1)) + jG), "a", 1))), 
                                        "assigning variable new_a");
                        }
                    }
                }
            }
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(new_a);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct chol_kronecker_product_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& LA,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& LG,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) const {
        return chol_kronecker_product(LA, LG, a, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_animalModel
  : public stan::model::model_base_crtp<model_animalModel> {
private:
        int K;
        int J;
        int N;
        std::vector<vector_d> X;
        std::vector<vector_d> Y;
        matrix_d A;
        matrix_d LA;
        vector_d y_sd;
        vector_d y_var;
        vector_d y_mean;
        std::vector<vector_d> Y_std;
public:
    model_animalModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_animalModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_animalModel_namespace::model_animalModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 30;
            validate_non_negative_index("X", "J", J);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N,J));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(J));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = J;
            size_t X_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("Y", "K", K);
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N,K));
            Y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = K;
            size_t Y_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("A", "N", N);
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "matrix_d", context__.to_vec(N,N));
            A = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_2_max__ = N;
            size_t A_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                    A(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 35;
            validate_non_negative_index("LA", "N", N);
            validate_non_negative_index("LA", "N", N);
            LA = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(LA, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("y_sd", "K", K);
            y_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_sd, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("y_var", "K", K);
            y_var = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_var, DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("y_mean", "K", K);
            y_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(y_mean, DUMMY_VAR__);
            current_statement_begin__ = 39;
            validate_non_negative_index("Y_std", "K", K);
            validate_non_negative_index("Y_std", "N", N);
            Y_std = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::fill(Y_std, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 40;
            stan::math::assign(LA, cholesky_decompose(A));
            current_statement_begin__ = 42;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 43;
                stan::model::assign(y_sd, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (sd(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")) / 2), 
                            "assigning variable y_sd");
                current_statement_begin__ = 44;
                stan::model::assign(y_mean, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Y")), 
                            "assigning variable y_mean");
                current_statement_begin__ = 45;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 46;
                    stan::model::assign(Y_std, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                ((get_base1(get_base1(Y, n, "Y", 1), k, "Y", 2) - get_base1(y_mean, k, "y_mean", 1)) / get_base1(y_sd, k, "y_sd", 1)), 
                                "assigning variable Y_std");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 50;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "J", J);
            num_params_r__ += (K * J);
            current_statement_begin__ = 51;
            validate_non_negative_index("a_tilde", "N", N);
            validate_non_negative_index("a_tilde", "K", K);
            num_params_r__ += (N * K);
            current_statement_begin__ = 54;
            validate_non_negative_index("L_Omega_G", "K", K);
            validate_non_negative_index("L_Omega_G", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 55;
            validate_non_negative_index("L_sigma_G", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 58;
            validate_non_negative_index("L_Omega_R", "K", K);
            validate_non_negative_index("L_Omega_R", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 59;
            validate_non_negative_index("L_sigma_R", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_animalModel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 50;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        validate_non_negative_index("beta", "J", J);
        context__.validate_dims("parameter initialization", "beta", "matrix_d", context__.to_vec(K,J));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(K, J);
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                beta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("a_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_tilde");
        pos__ = 0U;
        validate_non_negative_index("a_tilde", "N", N);
        validate_non_negative_index("a_tilde", "K", K);
        context__.validate_dims("parameter initialization", "a_tilde", "matrix_d", context__.to_vec(N,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_tilde(N, K);
        size_t a_tilde_j_2_max__ = K;
        size_t a_tilde_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                a_tilde(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(a_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("L_Omega_G")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega_G missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega_G");
        pos__ = 0U;
        validate_non_negative_index("L_Omega_G", "K", K);
        validate_non_negative_index("L_Omega_G", "K", K);
        context__.validate_dims("parameter initialization", "L_Omega_G", "matrix_d", context__.to_vec(K,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_G(K, K);
        size_t L_Omega_G_j_2_max__ = K;
        size_t L_Omega_G_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_G_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_G_j_1_max__; ++j_1__) {
                L_Omega_G(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega_G);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega_G: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("L_sigma_G")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_sigma_G missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_sigma_G");
        pos__ = 0U;
        validate_non_negative_index("L_sigma_G", "K", K);
        context__.validate_dims("parameter initialization", "L_sigma_G", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_G(K);
        size_t L_sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_G_j_1_max__; ++j_1__) {
            L_sigma_G(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, L_sigma_G);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_sigma_G: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("L_Omega_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega_R");
        pos__ = 0U;
        validate_non_negative_index("L_Omega_R", "K", K);
        validate_non_negative_index("L_Omega_R", "K", K);
        context__.validate_dims("parameter initialization", "L_Omega_R", "matrix_d", context__.to_vec(K,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R(K, K);
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                L_Omega_R(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("L_sigma_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_sigma_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_sigma_R");
        pos__ = 0U;
        validate_non_negative_index("L_sigma_R", "K", K);
        context__.validate_dims("parameter initialization", "L_sigma_R", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_R(K);
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            L_sigma_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, L_sigma_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_sigma_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(K, J, lp__);
            else
                beta = in__.matrix_constrain(K, J);
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a_tilde;
            (void) a_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                a_tilde = in__.matrix_constrain(N, K, lp__);
            else
                a_tilde = in__.matrix_constrain(N, K);
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega_G;
            (void) L_Omega_G;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega_G = in__.cholesky_factor_corr_constrain(K, lp__);
            else
                L_Omega_G = in__.cholesky_factor_corr_constrain(K);
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_sigma_G;
            (void) L_sigma_G;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma_G = in__.vector_lb_constrain(0, K, lp__);
            else
                L_sigma_G = in__.vector_lb_constrain(0, K);
            current_statement_begin__ = 58;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R;
            (void) L_Omega_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega_R = in__.cholesky_factor_corr_constrain(K, lp__);
            else
                L_Omega_R = in__.cholesky_factor_corr_constrain(K);
            current_statement_begin__ = 59;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_sigma_R;
            (void) L_sigma_R;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma_R = in__.vector_lb_constrain(0, K, lp__);
            else
                L_sigma_R = in__.vector_lb_constrain(0, K);
            // transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("a", "N", N);
            validate_non_negative_index("a", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a(N, K);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 64;
            stan::math::assign(a, multiply(multiply(LA, a_tilde), transpose(diag_pre_multiply(L_sigma_G, L_Omega_G))));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 63;
            size_t a_j_1_max__ = N;
            size_t a_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(a(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: a" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 67;
            validate_non_negative_index("mu", "K", K);
            validate_non_negative_index("mu", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > mu(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("L_Sigma_R", "K", K);
            validate_non_negative_index("L_Sigma_R", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Sigma_R(K, K);
            stan::math::initialize(L_Sigma_R, DUMMY_VAR__);
            stan::math::fill(L_Sigma_R, DUMMY_VAR__);
            current_statement_begin__ = 70;
            stan::math::assign(L_Sigma_R, diag_pre_multiply(L_sigma_R, L_Omega_R));
            current_statement_begin__ = 72;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 73;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            add(multiply(beta, get_base1(X, n, "X", 1)), to_vector(get_base1(a, n, "a", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 75;
            lp_accum__.add(multi_normal_cholesky_log<propto__>(Y_std, mu, L_Sigma_R));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(to_vector(beta), 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(to_vector(a_tilde), 0, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega_G, 4));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(L_sigma_G, 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega_R, 4));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log<propto__>(L_sigma_R, 0, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("a_tilde");
        names__.push_back("L_Omega_G");
        names__.push_back("L_sigma_G");
        names__.push_back("L_Omega_R");
        names__.push_back("L_sigma_R");
        names__.push_back("a");
        names__.push_back("sigma_G");
        names__.push_back("sigma_R");
        names__.push_back("P");
        names__.push_back("G");
        names__.push_back("E");
        names__.push_back("corrG");
        names__.push_back("corrE");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_animalModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta = in__.matrix_constrain(K, J);
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                vars__.push_back(beta(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_tilde = in__.matrix_constrain(N, K);
        size_t a_tilde_j_2_max__ = K;
        size_t a_tilde_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                vars__.push_back(a_tilde(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_G = in__.cholesky_factor_corr_constrain(K);
        size_t L_Omega_G_j_2_max__ = K;
        size_t L_Omega_G_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_G_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_G_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega_G(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_G = in__.vector_lb_constrain(0, K);
        size_t L_sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_G_j_1_max__; ++j_1__) {
            vars__.push_back(L_sigma_G(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega_R = in__.cholesky_factor_corr_constrain(K);
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega_R(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma_R = in__.vector_lb_constrain(0, K);
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            vars__.push_back(L_sigma_R(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("a", "N", N);
            validate_non_negative_index("a", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a(N, K);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 64;
            stan::math::assign(a, multiply(multiply(LA, a_tilde), transpose(diag_pre_multiply(L_sigma_G, L_Omega_G))));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t a_j_2_max__ = K;
                size_t a_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                        vars__.push_back(a(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 85;
            validate_non_negative_index("sigma_G", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_G(K);
            stan::math::initialize(sigma_G, DUMMY_VAR__);
            stan::math::fill(sigma_G, DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("sigma_R", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_R(K);
            stan::math::initialize(sigma_R, DUMMY_VAR__);
            stan::math::fill(sigma_R, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> P(K, K);
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("G", "K", K);
            validate_non_negative_index("G", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> G(K, K);
            stan::math::initialize(G, DUMMY_VAR__);
            stan::math::fill(G, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("E", "K", K);
            validate_non_negative_index("E", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E(K, K);
            stan::math::initialize(E, DUMMY_VAR__);
            stan::math::fill(E, DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("corrG", "K", K);
            validate_non_negative_index("corrG", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corrG(K, K);
            stan::math::initialize(corrG, DUMMY_VAR__);
            stan::math::fill(corrG, DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("corrE", "K", K);
            validate_non_negative_index("corrE", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corrE(K, K);
            stan::math::initialize(corrE, DUMMY_VAR__);
            stan::math::fill(corrE, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 93;
            stan::math::assign(sigma_G, elt_multiply(y_sd, L_sigma_G));
            current_statement_begin__ = 94;
            stan::math::assign(sigma_R, elt_multiply(y_sd, L_sigma_R));
            current_statement_begin__ = 96;
            stan::math::assign(G, multiply_lower_tri_self_transpose(diag_pre_multiply(sigma_G, L_Omega_G)));
            current_statement_begin__ = 97;
            stan::math::assign(E, multiply_lower_tri_self_transpose(diag_pre_multiply(sigma_R, L_Omega_R)));
            current_statement_begin__ = 98;
            stan::math::assign(P, add(G, E));
            current_statement_begin__ = 100;
            stan::math::assign(corrG, multiply_lower_tri_self_transpose(L_Omega_G));
            current_statement_begin__ = 101;
            stan::math::assign(corrE, multiply_lower_tri_self_transpose(L_Omega_R));
            // validate, write generated quantities
            current_statement_begin__ = 85;
            size_t sigma_G_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_G_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_G(j_1__));
            }
            current_statement_begin__ = 86;
            size_t sigma_R_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_R(j_1__));
            }
            current_statement_begin__ = 87;
            stan::math::check_cov_matrix(function__, "P", P);
            size_t P_j_2_max__ = K;
            size_t P_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    vars__.push_back(P(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 88;
            stan::math::check_cov_matrix(function__, "G", G);
            size_t G_j_2_max__ = K;
            size_t G_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < G_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < G_j_1_max__; ++j_1__) {
                    vars__.push_back(G(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 89;
            stan::math::check_cov_matrix(function__, "E", E);
            size_t E_j_2_max__ = K;
            size_t E_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                    vars__.push_back(E(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 90;
            stan::math::check_corr_matrix(function__, "corrG", corrG);
            size_t corrG_j_2_max__ = K;
            size_t corrG_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < corrG_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corrG_j_1_max__; ++j_1__) {
                    vars__.push_back(corrG(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 91;
            stan::math::check_corr_matrix(function__, "corrE", corrE);
            size_t corrE_j_2_max__ = K;
            size_t corrE_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < corrE_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corrE_j_1_max__; ++j_1__) {
                    vars__.push_back(corrE(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_animalModel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t a_tilde_j_2_max__ = K;
        size_t a_tilde_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_G_j_2_max__ = K;
        size_t L_Omega_G_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_G_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_G_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega_G" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_Omega_R_j_2_max__ = K;
        size_t L_Omega_R_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Omega_R_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega_R" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t a_j_2_max__ = K;
            size_t a_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P_j_2_max__ = K;
        size_t P_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "P" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t G_j_2_max__ = K;
        size_t G_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < G_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < G_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "G" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t E_j_2_max__ = K;
        size_t E_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < E_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corrG_j_2_max__ = K;
        size_t corrG_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < corrG_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corrG_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corrG" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corrE_j_2_max__ = K;
        size_t corrE_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < corrE_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corrE_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corrE" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_2_max__ = J;
        size_t beta_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t a_tilde_j_2_max__ = K;
        size_t a_tilde_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_G_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega_G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_Omega_R_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < L_sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t a_j_2_max__ = K;
            size_t a_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t sigma_G_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_R_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P_j_1_max__ = (K + ((K * (K - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t G_j_1_max__ = (K + ((K * (K - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < G_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "G" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t E_j_1_max__ = (K + ((K * (K - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < E_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corrG_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corrG_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corrG" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corrE_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corrE_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corrE" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_animalModel_namespace::model_animalModel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
